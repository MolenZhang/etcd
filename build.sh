#!/usr/bin/env bash
set -e
BASEDIR=$(cd `dirname $0` 2>/dev/null ; pwd -P)
LastDIR=$(dirname "$PWD")

build_env(){
	if [ -z "$GOROOT" ]; then
		echo 'setting goroot...'
		[ ! -d $LastDIR/go1.13.5 ] && {
      		wget -O - --no-check-certificate https://safe-sig.bj.bcebos.com/opinit/go1.13.5.linux-amd64.tar.gz -q | tar -xzf - -C $LastDIR
   		 }
	    export GOROOT=$LastDIR/go
	    export PATH=${GOROOT}/bin:${PATH}	
	else
		echo 'goroot is exists'
	fi

	go env -w GONOPROXY=\*\*.molen.com\*\*
	go env -w GONOSUMDB=\*
	go env -w GOPROXY=https://goproxy.molen.com
	
}

build_meta() {
	local moduleName=$(git remote -v | grep fetch)
	if [[ ${moduleName} =~ "icode.molen.com:8235" ]]; then
		local moduleName=${moduleName#*icode.molen.com:8235/}
	else
		local moduleName=${moduleName#*icode.molen.com:8335/}
	fi
	local moduleName=${moduleName% *}
	ProjectName=${moduleName##*/}
	ProjectName=${ProjectName##*\-}
	if [[ "$1" != "" ]]; then
		ProjectName=$1
	fi
	local goversion=$(go version)
	local commitid=$(git log -1 --pretty="%H")
	local builddate=$(date +'%Y-%m-%d %H:%M:%S')
	local buildhostname=$(hostname)
	local buildwhoami=$(whoami)
	local gitbranch=$(git rev-parse --abbrev-ref HEAD)
	local gitmessage=$(git log -n 1 --pretty=format:'%s')
	local gitauthor=$(git log -n 1 --pretty=format:'%ce')
	echo -e "\033[01;34mgoversion     =   ${goversion}       \033[1m"
	echo -e "\033[01;34mmodulename    =   ${moduleName}      \033[1m"
	echo -e "\033[01;34mprojectname   =   ${ProjectName}     \033[1m"
	echo -e "\033[01;34mgitbranch     =   ${gitbranch}       \033[1m"
	echo -e "\033[01;34mcommitid      =   ${commitid}        \033[1m"
	echo -e "\033[01;34mgitauthor     =   ${gitauthor}       \033[1m"
	echo -e "\033[01;34mgitmessage    =   ${gitmessage}      \033[1m"
	echo -e "\033[01;34mhostname      =   ${buildhostname}   \033[1m"
	echo -e "\033[01;34mwhoami        =   ${buildwhoami}     \033[1m"
	echo -e "\033[01;34mbuilddate     =   ${builddate}       \033[0m"
	echo ""
	local detail="
    // Code generated by tool. DO NOT EDIT!         \n
    package main                                    \n\n
    var MetaData = map[string]interface{}{          \n
        \"goversion\":   \"${goversion}\",          \n
        \"commitid\":    \"${commitid}\",           \n
        \"gitbranch\":   \"${gitbranch}\",          \n
        \"gitauthor\":   \"${gitauthor}\",          \n
        \"commitdata\":  \"${commitdata}\",         \n
        \"gitmessage\":  \`${gitmessage}\`,         \n
        \"builddate\":   \"${builddate}\",          \n
        \"modulename\":  \"${moduleName}\",         \n
        \"projectname\": \"${ProjectName}\",        \n
        \"hostname\":    \"${buildhostname}\",      \n
        \"whoami\":      \"${buildwhoami}\",        \n
    }                                               \n
    "
	echo -e ${detail} >${BASEDIR}/master/version.go
}

build_main(){
	[ ! -d "$BASEDIR/bin" ] && {
		mkdir -p $BASEDIR/bin
	}
	go mod tidy
    CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o $BASEDIR/bin/greedy-master  $BASEDIR/master/main.go
}

build_output() {
	[ ! -d "$BASEDIR/output" ] && {
		mkdir -p $BASEDIR/output
	} || {
		rm -rf $BASEDIR/output/*
	}
	wget --no-check-certificate -q -O - 'https://safe-sig.bj.bcebos.com/opinit/archer3.tar.gz' \
	| tar -xzvf - -C $BASEDIR/output/
	cp -rf $BASEDIR/bin/* $BASEDIR/output/bin/
	cat $BASEDIR/noahdes/conf_template.value >> $BASEDIR/output/noahdes/conf_template.value

    pushd output && {
	  fn=$(basename $BASEDIR).tar.gz
	  tar -czvf $fn ./*
   	  popd
    }
}

main(){
	build_env
	build_meta
	build_main
	build_output
}
main $@